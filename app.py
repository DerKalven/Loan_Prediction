import streamlit as st
import numpy as np
from sklearn.preprocessing import StandardScaler
import joblib
import time

st.set_page_config(
    page_title="Loan Status Predictor - Data Science Portfolio",
    page_icon="üí≥",
    layout="wide"
)

# Header con informaci√≥n del proyecto
st.markdown("""
<div style='text-align: center; padding: 20px; background-color: #f0f2f6; border-radius: 10px; margin-bottom: 20px;'>
    <h1 style='color: #1f77b4; margin-bottom: 10px;'>üí≥ Loan Status Prediction App</h1>
    <p style='font-size: 18px; color: #2c3e50; font-weight: 500;'>Predictor de Estado de Pr√©stamos usando Machine Learning</p>
    <p style='font-size: 14px; color: #e74c3c; font-weight: bold;'>‚ö†Ô∏è Modelo creado con fines educativos</p>
</div>
""", unsafe_allow_html=True)


# Cargar modelos con mejor manejo de errores
@st.cache_resource
def load_models():
    try:
        scaler = joblib.load("scaler.pkl")
        model = joblib.load("model.pkl")

        # Verificar si el scaler est√° entrenado
        try:
            _ = scaler.mean_  # Esto fallar√° si no est√° fitted
            st.success("‚úÖ Modelos cargados correctamente")
            return scaler, model, True
        except AttributeError:
            st.warning("‚ö†Ô∏è El scaler no est√° entrenado. Usando normalizaci√≥n manual.")
            return scaler, model, False

    except FileNotFoundError as e:
        st.error(f"‚ùå Error: No se pudo cargar el archivo: {e}")
        return None, None, False


# Funci√≥n de animaci√≥n combinada (texto + emojis)
def animated_result(is_approved):
    """Animaci√≥n combinada de texto y emojis"""
    progress_text = st.empty()

    if is_approved:
        # Secuencia para aprobado
        animations = [
            ("üîç", "Analizando datos..."),
            ("‚öñÔ∏è", "Evaluando perfil crediticio..."),
            ("‚úÖ", "Verificando informaci√≥n..."),
            ("üéâ", "¬°PR√âSTAMO APROBADO!"),
            ("ü•≥", "¬°Felicitaciones!")
        ]
        color = "green"
    else:
        # Secuencia para rechazado
        animations = [
            ("üîç", "Analizando datos..."),
            ("‚öñÔ∏è", "Evaluando perfil crediticio..."),
            ("üìä", "Revisando criterios..."),
            ("‚ùå", "PR√âSTAMO NO APROBADO"),
            ("üí™", "¬°No te desanimes, sigue mejorando!")
        ]
        color = "red"

    # Mostrar cada paso de la animaci√≥n
    for emoji, text in animations:
        progress_text.markdown(
            f"""
            <div style='text-align: center; padding: 20px;'>
                <h1 style='font-size: 80px; margin: 0;'>{emoji}</h1>
                <h3 style='color: {color}; margin: 10px 0;'>{text}</h3>
            </div>
            """,
            unsafe_allow_html=True
        )
        time.sleep(0.8)

    progress_text.empty()


scaler, model, scaler_fitted = load_models()

if scaler is None or model is None:
    st.stop()

# Informaci√≥n del dataset y modelo
with st.expander("üìä Informaci√≥n del Dataset y Modelo", expanded=False):
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### üìà Dataset")
        st.markdown(
            "**Fuente:** [Kaggle - Loan Status Prediction](https://www.kaggle.com/datasets/bhavikjikadara/loan-status-prediction)")
        st.markdown("**Descripci√≥n:** Dataset para predicci√≥n de aprobaci√≥n de pr√©stamos")
        st.markdown("**Variables principales:**")
        st.markdown("- Estado Civil")
        st.markdown("- Ingresos Anuales")
        st.markdown("- Nivel Educativo")
        st.markdown("- Monto del Pr√©stamo")
        st.markdown("- Historial Crediticio")

    with col2:
        st.markdown("### ü§ñ Modelo de Machine Learning")
        st.markdown("**Algoritmo:** Support Vector Classifier (SVC)")
        st.markdown("**Par√°metros:**")
        st.markdown("- `C = 0.05` (Par√°metro de regularizaci√≥n)")
        st.markdown("- `kernel = 'linear'` (Kernel lineal)")
        st.markdown("**Preprocesamiento:** StandardScaler")
        st.markdown("**Finalidad:** Proyecto educativo de Data Science")

st.divider()

# Inputs del usuario
col1, col2, col3 = st.columns(3)

with col1:
    married = st.selectbox("Client is Married?", ["No", "Yes"])
    education = st.selectbox("Client is graduated?", ["No", "Yes"])

with col2:
    income = st.number_input("Annual Income", min_value=0, value=10000, step=500)
    loan_amount = st.number_input("Loan Amount", min_value=0, value=10000, step=500)

with col3:
    credit_history = st.selectbox("Credit History?", ["No", "Yes"])

# Selector de tipo de animaci√≥n (removido)
# animation_type = st.radio(
#     "Elige el tipo de animaci√≥n:",
#     ["Cl√°sica (Nieve/Globos)", "Emojis Animados", "Texto Animado", "Sin Animaci√≥n"]
# )

predictbutton = st.button("Predict the Approval!", type="primary")

st.divider()

# Procesar predicci√≥n solo cuando se presiona el bot√≥n
if predictbutton:
    try:
        # Conversi√≥n de variables categ√≥ricas
        marriedstatus = 1 if married == "Yes" else 0
        educationstatus = 1 if education == "Yes" else 0
        credit_historystatus = 1 if credit_history == "Yes" else 0

        # Crear array con todas las caracter√≠sticas
        features = np.array([[marriedstatus, income, educationstatus, loan_amount, credit_historystatus]], dtype=float)

        # Aplicar escalado
        if scaler_fitted:
            X_scaled = scaler.transform(features)
        else:
            X_scaled = features
            st.info("‚ÑπÔ∏è Usando datos sin escalar")

        # Hacer predicci√≥n
        prediction = model.predict(X_scaled)
        probability = None

        # Intentar obtener probabilidades si est√° disponible
        try:
            probability = model.predict_proba(X_scaled)
        except:
            pass

        # ANIMACI√ìN COMBINADA (Texto + Emojis)
        animated_result(prediction[0] == 1)

        # Mostrar resultado final con informaci√≥n adicional
        st.markdown("### üìä Resultados de la Predicci√≥n")

        col1, col2, col3 = st.columns(3)

        with col1:
            if prediction[0] == 1:
                st.success("üéâ ¬°APROBADO!")
                st.markdown("#### üéä ¬°Felicitaciones!")
                st.markdown("Tu pr√©stamo ha sido **aprobado** seg√∫n el modelo SVC.")
            else:
                st.error("‚ùå NO APROBADO")
                st.markdown("#### üí° Resultado del An√°lisis")
                st.markdown("El modelo SVC **no recomienda** aprobar este pr√©stamo.")

        with col2:
            if probability is not None:
                prob_approved = probability[0][1] * 100
                st.metric("Probabilidad de Aprobaci√≥n", f"{prob_approved:.1f}%")

                # Barra de progreso visual
                st.progress(prob_approved / 100)

                # Interpretaci√≥n de probabilidad
                if prob_approved < 30:
                    st.markdown("üîª **Probabilidad Baja**")
                elif prob_approved < 60:
                    st.markdown("üî∂ **Probabilidad Moderada**")
                else:
                    st.markdown("üî∫ **Probabilidad Alta**")

        with col3:
            st.markdown("#### üìã Modelo Utilizado")
            st.markdown("**SVC (Support Vector Classifier)**")
            st.markdown("- C = 0.05")
            st.markdown("- Kernel = Linear")
            st.markdown("- Preprocesamiento: StandardScaler")

        # Recomendaciones basadas en resultado
        st.markdown("### üí° Interpretaci√≥n y Recomendaciones")

        if prediction[0] == 1:
            st.info("""
            **‚úÖ Perfil Aprobado:** El modelo identifica que este perfil cumple con los criterios 
            t√≠picos para la aprobaci√≥n de pr√©stamos seg√∫n los patrones encontrados en el dataset de entrenamiento.
            """)
        else:
            st.warning("""
            **‚ùå Perfil No Aprobado:** El modelo sugiere que este perfil presenta caracter√≠sticas 
            que hist√≥ricamente se asocian con mayor riesgo de impago seg√∫n el dataset de entrenamiento.

            **Posibles mejoras para futuras solicitudes:**
            - Mejorar el historial crediticio
            - Aumentar los ingresos
            - Considerar un monto de pr√©stamo menor
            """)

        # Disclaimer importante
        st.markdown("### ‚ö†Ô∏è Importante")
        st.warning("""
        **Este es un modelo educativo** basado en datos de Kaggle y no debe utilizarse para 
        decisiones reales de pr√©stamos. Los algoritmos de ML pueden tener sesgos y las decisiones 
        financieras reales requieren an√°lisis m√°s complejos y regulados.
        """)

        # Mostrar valores de entrada para debug
        with st.expander("üîç Valores de entrada (debug)"):
            st.write(f"Married: {marriedstatus}")
            st.write(f"Income: {income}")
            st.write(f"Education: {educationstatus}")
            st.write(f"Loan Amount: {loan_amount}")
            st.write(f"Credit History: {credit_historystatus}")

    except Exception as e:
        st.error(f"‚ùå Error durante la predicci√≥n: {e}")

        with st.expander("üêõ Detalles del error"):
            import traceback

            st.code(traceback.format_exc())

# Informaci√≥n adicional
with st.sidebar:
    st.markdown("### üë®‚Äçüíª Informaci√≥n del Proyecto")

    st.markdown("#### üìä Dataset")
    st.markdown("**Fuente:** Kaggle")
    st.markdown("**Nombre:** Loan Status Prediction")
    st.markdown("üîó [Ver Dataset](https://www.kaggle.com/datasets/bhavikjikadara/loan-status-prediction)")

    st.markdown("#### ü§ñ Modelo")
    st.markdown("**Algoritmo:** SVC")
    st.markdown("**Par√°metros:**")
    st.markdown("- C = 0.05")
    st.markdown("- kernel = 'linear'")

    st.markdown("#### üéØ Variables del Modelo")
    st.markdown("1. Estado Civil")
    st.markdown("2. Ingresos Anuales")
    st.markdown("3. Educaci√≥n")
    st.markdown("4. Monto del Pr√©stamo")
    st.markdown("5. Historial Crediticio")

    if scaler_fitted:
        st.success("Scaler: ‚úÖ Entrenado")
    else:
        st.warning("Scaler: ‚ö†Ô∏è No entrenado")

    st.divider()

    st.markdown("#### üé¨ Animaci√≥n")
    st.markdown("**Secuencia animada** que combina emojis con mensajes de progreso")
    st.markdown("- ‚úÖ **Aprobado:** üîç ‚Üí ‚öñÔ∏è ‚Üí ‚úÖ ‚Üí üéâ ‚Üí ü•≥")
    st.markdown("- ‚ùå **Rechazado:** üîç ‚Üí ‚öñÔ∏è ‚Üí üìä ‚Üí ‚ùå ‚Üí üí™")

    st.divider()

    st.markdown("#### ‚ö†Ô∏è Aviso Legal")
    st.markdown(
        "**Este modelo fue creado con fines educativos.** No debe utilizarse para decisiones reales de pr√©stamos.")

    # Informaci√≥n de contacto (opcional - puedes personalizarlo)
    st.markdown("#### üì´ Portfolio")
    st.markdown("üêô [GitHub](https://github.com)")
    st.markdown("üíº [LinkedIn](https://linkedin.com)")
    st.markdown("üìß email@ejemplo.com")
